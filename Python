#Meu primeiro sistema criado em python
import json
import os
import tkinter as tk
from tkinter import messagebox, ttk
from datetime import datetime

def carregar_dados():
    """Carrega dados do arquivo JSON, se existir."""
    if os.path.exists('C:\\Users\\julio.santos\\Desktop\\Python\\dados.json'):
        with open('C:\\Users\\julio.santos\\Desktop\\Python\\dados.json', 'r') as arquivo_json:
            return json.load(arquivo_json)
    return []

def salvar_dados(dados):
    """Salva dados no arquivo JSON na pasta especificada."""
    caminho_arquivo = os.path.join('C:\\Users\\julio.santos\\Desktop\\Python', 'dados.json')
    try:
        with open(caminho_arquivo, 'w') as arquivo_json:
            json.dump(dados, arquivo_json, indent=4)
    except Exception as e:
        messagebox.showerror("Erro", f"Ocorreu um erro: {e}")

def mostrar_dados():
    """Exibe dados armazenados no Treeview."""
    for i in tree.get_children():
        tree.delete(i)

    dados = carregar_dados()
    if dados:
        for dado in dados:
            nome = dado.get('nome', 'N/A')
            telefone = dado.get('telefone', 'N/A')
            tree.insert("", tk.END, values=(nome, telefone))
    else:
        messagebox.showwarning("Nenhum Dado", "Nenhum dado encontrado.")

def criar_dados():
    """Cria novos dados a partir dos campos de entrada."""
    nome = entry_nome.get().strip()
    telefone = entry_telefone.get().strip()
    data = entry_data.get().strip()  # Campo de data

    if nome and telefone and data:
        novo_dado = {"nome": nome, "telefone": telefone, "data": data}
        dados = carregar_dados()
        dados.append(novo_dado)
        salvar_dados(dados)
        messagebox.showinfo("Sucesso", "Dados armazenados com sucesso em 'dados.json'.")
        entry_nome.delete(0, tk.END)
        entry_telefone.delete(0, tk.END)
        entry_data.delete(0, tk.END)
    else:
        messagebox.showwarning("Dados Incompletos", "Por favor, preencha todos os campos.")

def apagar_dados():
    """Apaga dados com base no nome fornecido."""
    nome_apagar = entry_apagar.get().strip()
    dados = carregar_dados()
    
    if nome_apagar:
        dados_filtrados = [dado for dado in dados if dado['nome'].lower() != nome_apagar.lower()]
        if len(dados) == len(dados_filtrados):
            messagebox.showinfo("Resultado da Exclusão", "Nenhum dado encontrado com o nome fornecido.")
        else:
            salvar_dados(dados_filtrados)
            messagebox.showinfo("Sucesso", "Dados apagados com sucesso.")
        entry_apagar.delete(0, tk.END)
    else:
        messagebox.showwarning("Nome Vazio", "Por favor, forneça um nome para apagar.")

def sair():
    """Fecha a aplicação."""
    if messagebox.askokcancel("Sair", "Você realmente quer sair?"):
        root.quit()

def pesquisar_dados():
    """Pesquisa dados com base no nome fornecido."""
    nome_pesquisa = entry_pesquisa.get().strip()
    for i in tree.get_children():
        tree.delete(i)

    dados = carregar_dados()
    encontrado = False
    for dado in dados:
        if dado.get('nome', '').lower() == nome_pesquisa.lower():
            telefone = dado.get('telefone', 'N/A')
            tree.insert("", tk.END, values=(dado['nome'], telefone))
            encontrado = True
            
    if not encontrado:
        messagebox.showinfo("Resultado da Pesquisa", "Nenhum dado encontrado para o nome fornecido.")
    entry_pesquisa.delete(0, tk.END)

def pesquisar_dados_por_data():
    """Pesquisa dados com base na data fornecida."""
    data_pesquisa = entry_data_pesquisa.get().strip()
    for i in tree.get_children():
        tree.delete(i)

    try:
        # Tenta converter a data fornecida para um objeto datetime
        data_formatada = datetime.strptime(data_pesquisa, "%d/%m/%Y").strftime("%d/%m/%Y")
        dados = carregar_dados()
        encontrado = False
        for dado in dados:
            if dado.get('data') == data_formatada:
                telefone = dado.get('telefone', 'N/A')
                tree.insert("", tk.END, values=(dado['nome'], telefone))
                encontrado = True
                
        if not encontrado:
            messagebox.showinfo("Resultado da Pesquisa", "Nenhum dado encontrado para a data fornecida.")
    except ValueError:
        messagebox.showwarning("Data Inválida", "Por favor, insira uma data válida no formato DD/MM/AAAA.")
    entry_data_pesquisa.delete(0, tk.END)

# Criação da janela principal
root = tk.Tk()
root.title("Sistema de Dados - Governo do Ceará")
root.geometry("400x600")
root.configure(bg="#f0f8ff")

# Título
title_label = ttk.Label(root, text="Sistema de Atendimento", font=("Helvetica", 20, "bold"), background="#f0f8ff")
title_label.pack(pady=20)

# Criação do Notebook para abas
notebook = ttk.Notebook(root)
notebook.pack(pady=10, fill='both', expand=True)

# Aba de Cadastro
cadastro_frame = ttk.Frame(notebook)
notebook.add(cadastro_frame, text="Cadastro")

# Formulário de entrada de dados
form_frame = ttk.Frame(cadastro_frame)
form_frame.pack(pady=10)

ttk.Label(form_frame, text="Nome:").grid(row=0, column=0, padx=5, pady=5)
entry_nome = ttk.Entry(form_frame)
entry_nome.grid(row=0, column=1, padx=5, pady=5)

ttk.Label(form_frame, text="Telefone (DDD 85):").grid(row=1, column=0, padx=5, pady=5)
entry_telefone = ttk.Entry(form_frame)
entry_telefone.insert(0, "(85) ")  # Inserir DDD 85 automaticamente
entry_telefone.grid(row=1, column=1, padx=5, pady=5)

ttk.Label(form_frame, text="Data (DD/MM/AAAA):").grid(row=2, column=0, padx=5, pady=5)  # Adiciona o campo de data
entry_data = ttk.Entry(form_frame)
entry_data.grid(row=2, column=1, padx=5, pady=5)

# Botões na aba de cadastro
button_frame = ttk.Frame(cadastro_frame)
button_frame.pack(pady=10)

btn_criar = ttk.Button(button_frame, text="Salvar Dados", command=criar_dados)
btn_criar.grid(row=0, column=0, padx=5)

btn_mostrar = ttk.Button(button_frame, text="Mostrar Dados Armazenados", command=mostrar_dados)
btn_mostrar.grid(row=0, column=1, padx=5)

btn_sair = ttk.Button(button_frame, text="Sair", command=sair)
btn_sair.grid(row=0, column=2, padx=5)

# Criação do Treeview para mostrar dados
columns = ('Nome', 'Telefone')
tree = ttk.Treeview(root, columns=columns, show='headings', height=10)
tree.heading('Nome', text='Nome')
tree.heading('Telefone', text='Telefone')
tree.pack(pady=10)

# Aba de Pesquisa
pesquisa_frame = ttk.Frame(notebook)
notebook.add(pesquisa_frame, text="Pesquisa")

ttk.Label(pesquisa_frame, text="Nome para Pesquisa:").pack(pady=5)
entry_pesquisa = ttk.Entry(pesquisa_frame)
entry_pesquisa.pack(pady=5)

btn_pesquisar = ttk.Button(pesquisa_frame, text="Pesquisar", command=pesquisar_dados)
btn_pesquisar.pack(pady=5)

# Aba de Exclusão
exclusao_frame = ttk.Frame(notebook)
notebook.add(exclusao_frame, text="Exclusão")

ttk.Label(exclusao_frame, text="Nome para Apagar:").pack(pady=5)
entry_apagar = ttk.Entry(exclusao_frame)
entry_apagar.pack(pady=5)

btn_apagar = ttk.Button(exclusao_frame, text="Apagar Dados", command=apagar_dados)
btn_apagar.pack(pady=5)

# Nova aba de Pesquisa por Data
data_frame = ttk.Frame(notebook)
notebook.add(data_frame, text="Pesquisa por Data")

ttk.Label(data_frame, text="Data para Pesquisa (DD/MM/AAAA):").pack(pady=5)
entry_data_pesquisa = ttk.Entry(data_frame)
entry_data_pesquisa.pack(pady=5)

btn_pesquisar_data = ttk.Button(data_frame, text="Pesquisar por Data", command=pesquisar_dados_por_data)
btn_pesquisar_data.pack(pady=5)

# Iniciar o loop da interface
root.mainloop()
